---
description: 
globs: 
alwaysApply: true
---
Description: Maintain strict separation between core game logic, rendering, and UI.
    - **Core (`src/core/*.ts`)**: Manages state and logic via ECS (Components, Entities, Systems, World). Should be runnable independently of rendering or UI.
    - **Rendering (`src/rendering/*.ts`)**: Reads component data (Position, Renderable, etc.) and uses Three.js via `SceneManager`/`MeshFactory` to display visuals. Does NOT modify core game state.
    - **UI (`src/ui/*.tsx`)**: React components that read game state (often mediated by a system like `HUDSystem` or `State.ts`) and display information. User input affecting game state should be routed back to core input handling (`InputManager`/`InputSystem`).

Why: Prevents tight coupling, improves testability, maintainability, and allows replacing layers (e.g., UI framework) with minimal impact on others.

File Pattern: Applies across `src/core/*.ts`, `src/rendering/*.ts`, and `src/ui/*.tsx`. Pay special attention to systems interacting with UI (like `HUDSystem`).