---
description: 
globs: 
alwaysApply: true
---
Description: Implement and maintain a strict Entity-Component-System (ECS) pattern using the `World` class for all game entities, components, and logic.

Why: The ECS pattern provides a flexible, performant, and maintainable way to handle game entities and their behaviors, facilitating feature addition and modification.

File Pattern: Applies to `src/core/World.ts`, `src/core/components.ts`, and all files in `src/core/entities/` and `src/core/systems/`.

Rules:
1. All game entities MUST be represented by a unique ID generated via `world.createEntity()`.
2. Entity creation logic MUST reside in factory functions within `src/core/entities/`. These factories assemble entities by adding components using `world.addComponent(entityId, componentName, componentData)`.
3. Components (`src/core/components.ts`) MUST be pure data structures (interfaces with no methods). They define entity properties.
4. Systems (`src/core/systems/`) MUST implement the `System` interface (implicitly via class structure having `world` and `update(deltaTime)`). They contain game logic, operating on entities retrieved via `world.getEntitiesWith([...componentNames])`.
5. Systems SHOULD read component data to make decisions and modify component data or global state (`State.ts`) to enact changes.
6. Systems SHOULD NOT directly manipulate Three.js objects; this is the responsibility of `RenderingSystem` based on component data.
7. The `World` class manages entity lifecycle, component storage, and system execution order (defined in `Game.ts`).