---
description: 
globs: 
alwaysApply: true
---
Description: Prioritize performance in game logic and rendering. Minimize garbage collection, optimize rendering calls, and use efficient algorithms.

Why: Critical for smooth gameplay (target 60 FPS) and efficient resource use in a real-time 3D game.

File Pattern: Applies particularly to `src/core/systems/*.ts`, `src/rendering/SceneManager.ts`, `src/rendering/MeshFactory.ts`, and potentially `src/core/World.ts`.

Practices:
1. **Reduce GC:** Avoid frequent object/array allocation in `update` loops within systems. Reuse objects (vectors, etc.) where possible.
2. **Object Pooling:** Implement pooling for frequently created/destroyed entities (e.g., projectiles, enemies, effects) and their associated Three.js meshes.
3. **Three.js Efficiency:**
    - Use `THREE.InstancedMesh` via `MeshFactory`/`RenderingSystem` for large numbers of identical objects.
    - Ensure proper disposal of Three.js resources (`geometry`, `material`, `texture`) in `SceneManager`/`RenderingSystem` when objects are removed.
    - Consider Level of Detail (`THREE.LOD`) for complex models if needed.
4. **Efficient Collisions:** Use appropriate collision shapes and algorithms in `CollisionSystem`. Consider spatial partitioning if collision checks become a bottleneck.
5. **Profile:** Regularly profile the game to identify specific bottlenecks.